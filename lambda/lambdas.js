"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processUser = exports.createUser = exports.hello = void 0;
const AWS = require("aws-sdk");
const nanoid_1 = require("nanoid");
const dynamodb = new AWS.DynamoDB.DocumentClient({ region: 'us-east-1' });
const ses = new AWS.SES({ region: 'sa-east-1' });
const sqs = new AWS.SQS({ region: 'us-east-1' });
async function hello(event, context, callback) {
    return {
        statusCode: 200,
        body: JSON.stringify({
            message: 'Hello Lambda'
        })
    };
}
exports.hello = hello;
async function createUser(req) {
    const TABLE_NAME = process.env.TABLE_NAME || 'UserTable';
    const EMAIL_PROCESSING_QUEUE_URL = process.env.EMAIL_PROCESSING_QUEUE_URL || 'EmailQueue';
    const body = JSON.parse(req.body);
    const { name, email, items } = body;
    const userId = (0, nanoid_1.nanoid)();
    const newUser = {
        userId,
        name,
        email,
        items
    };
    try {
        const dbParams = {
            TableName: TABLE_NAME,
            Item: newUser
        };
        await dynamodb.put(dbParams).promise();
        const { MessageId } = await sqs.sendMessage({
            QueueUrl: EMAIL_PROCESSING_QUEUE_URL,
            MessageBody: JSON.stringify({ user: newUser })
        }).promise();
        return {
            statusCode: 200,
            body: JSON.stringify({
                message: 'User created'
            })
        };
    }
    catch (error) {
        return {
            statusCode: 500,
            body: JSON.stringify({
                message: 'Fail to create user'
            })
        };
    }
}
exports.createUser = createUser;
async function processUser(props) {
    const adminEmail = 'bruno_delatea@hotmail.com';
    const recordPromises = props.Records.map(async (record) => {
        const { body } = record;
        const { user } = JSON.parse(body);
        const { name, email, items } = user;
        const userMessage = `
            New user: ${name}
            Email: ${email}
            Items: ${JSON.stringify(items)}
        `;
        const sesParams = {
            Message: {
                Body: {
                    Text: {
                        Data: userMessage,
                        Charset: 'UTF-8'
                    }
                },
                Subject: {
                    Data: 'New user',
                    Charset: 'UTF-8'
                }
            },
            Source: adminEmail,
            Destination: {
                ToAddresses: [adminEmail]
            }
        };
        await ses.sendEmail(sesParams).promise();
    });
    await Promise.all(recordPromises);
}
exports.processUser = processUser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFtYmRhcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxhbWJkYXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsK0JBQStCO0FBQy9CLG1DQUErQjtBQUUvQixNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDMUUsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDakQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFFMUMsS0FBSyxVQUFVLEtBQUssQ0FBQyxLQUFzQixFQUFFLE9BQWdCLEVBQUUsUUFBa0I7SUFDcEYsT0FBTztRQUNILFVBQVUsRUFBRSxHQUFHO1FBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDakIsT0FBTyxFQUFFLGNBQWM7U0FDMUIsQ0FBQztLQUNMLENBQUM7QUFDTixDQUFDO0FBUEQsc0JBT0M7QUFFTSxLQUFLLFVBQVUsVUFBVSxDQUFDLEdBQVE7SUFDckMsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksV0FBVyxDQUFDO0lBQ3pELE1BQU0sMEJBQTBCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsSUFBSSxZQUFZLENBQUM7SUFDMUYsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDO0lBQ3BDLE1BQU0sTUFBTSxHQUFHLElBQUEsZUFBTSxHQUFFLENBQUM7SUFFeEIsTUFBTSxPQUFPLEdBQUc7UUFDWixNQUFNO1FBQ04sSUFBSTtRQUNKLEtBQUs7UUFDTCxLQUFLO0tBQ1IsQ0FBQztJQUVILElBQUk7UUFDQyxNQUFNLFFBQVEsR0FBRztZQUNiLFNBQVMsRUFBRSxVQUFVO1lBQ3JCLElBQUksRUFBRSxPQUFPO1NBQ2hCLENBQUM7UUFFRixNQUFNLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFdkMsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLE1BQU0sR0FBRyxDQUFDLFdBQVcsQ0FBQztZQUN4QyxRQUFRLEVBQUUsMEJBQTBCO1lBQ3BDLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDO1NBQ2pELENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUVaLE9BQU87WUFDSCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUNqQixPQUFPLEVBQUUsY0FBYzthQUMxQixDQUFDO1NBQ0wsQ0FBQztLQUNMO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDWixPQUFPO1lBQ0gsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDakIsT0FBTyxFQUFFLHFCQUFxQjthQUNqQyxDQUFDO1NBQ0wsQ0FBQztLQUNMO0FBQ0wsQ0FBQztBQXpDRCxnQ0F5Q0M7QUFFTSxLQUFLLFVBQVUsV0FBVyxDQUFDLEtBQVU7SUFDeEMsTUFBTSxVQUFVLEdBQUcsMkJBQTJCLENBQUM7SUFDL0MsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQVcsRUFBRSxFQUFFO1FBQzNELE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUM7UUFDeEIsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBRXBDLE1BQU0sV0FBVyxHQUFHO3dCQUNKLElBQUk7cUJBQ1AsS0FBSztxQkFDTCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztTQUNqQyxDQUFDO1FBQ0YsTUFBTSxTQUFTLEdBQUc7WUFDZCxPQUFPLEVBQUU7Z0JBQ0wsSUFBSSxFQUFFO29CQUNGLElBQUksRUFBRTt3QkFDRixJQUFJLEVBQUUsV0FBVzt3QkFDakIsT0FBTyxFQUFFLE9BQU87cUJBQ25CO2lCQUNKO2dCQUNELE9BQU8sRUFBRTtvQkFDTCxJQUFJLEVBQUUsVUFBVTtvQkFDaEIsT0FBTyxFQUFFLE9BQU87aUJBQ25CO2FBQ0o7WUFDRCxNQUFNLEVBQUUsVUFBVTtZQUNsQixXQUFXLEVBQUU7Z0JBQ1QsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDO2FBQzVCO1NBQ0osQ0FBQztRQUNGLE1BQU0sR0FBRyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM3QyxDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBakNELGtDQWlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUdhdGV3YXlFdmVudCwgQ29udGV4dCwgQ2FsbGJhY2ssIEFQSUdhdGV3YXlQcm94eVJlc3VsdCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xuaW1wb3J0ICogYXMgQVdTIGZyb20gJ2F3cy1zZGsnO1xuaW1wb3J0IHsgbmFub2lkIH0gZnJvbSAnbmFub2lkJ1xuXG5jb25zdCBkeW5hbW9kYiA9IG5ldyBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoeyByZWdpb246ICd1cy1lYXN0LTEnIH0pO1xuY29uc3Qgc2VzID0gbmV3IEFXUy5TRVMoeyByZWdpb246ICdzYS1lYXN0LTEnIH0pO1xuY29uc3Qgc3FzID0gbmV3IEFXUy5TUVMoeyByZWdpb246ICd1cy1lYXN0LTEnIH0pO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGVsbG8oZXZlbnQ6IEFQSUdhdGV3YXlFdmVudCwgY29udGV4dDogQ29udGV4dCwgY2FsbGJhY2s6IENhbGxiYWNrKTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHQ+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdIZWxsbyBMYW1iZGEnXG4gICAgICAgIH0pXG4gICAgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVVzZXIocmVxOiBhbnkpIHtcbiAgICBjb25zdCBUQUJMRV9OQU1FID0gcHJvY2Vzcy5lbnYuVEFCTEVfTkFNRSB8fCAnVXNlclRhYmxlJztcbiAgICBjb25zdCBFTUFJTF9QUk9DRVNTSU5HX1FVRVVFX1VSTCA9IHByb2Nlc3MuZW52LkVNQUlMX1BST0NFU1NJTkdfUVVFVUVfVVJMIHx8ICdFbWFpbFF1ZXVlJztcbiAgICBjb25zdCBib2R5ID0gSlNPTi5wYXJzZShyZXEuYm9keSk7XG4gICAgY29uc3QgeyBuYW1lLCBlbWFpbCwgaXRlbXMgfSA9IGJvZHk7XG4gICAgY29uc3QgdXNlcklkID0gbmFub2lkKCk7XG5cbiAgICBjb25zdCBuZXdVc2VyID0ge1xuICAgICAgICB1c2VySWQsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGVtYWlsLFxuICAgICAgICBpdGVtc1xuICAgIH07XG5cbiAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRiUGFyYW1zID0ge1xuICAgICAgICAgICAgVGFibGVOYW1lOiBUQUJMRV9OQU1FLFxuICAgICAgICAgICAgSXRlbTogbmV3VXNlclxuICAgICAgICB9O1xuXG4gICAgICAgIGF3YWl0IGR5bmFtb2RiLnB1dChkYlBhcmFtcykucHJvbWlzZSgpO1xuXG4gICAgICAgIGNvbnN0IHsgTWVzc2FnZUlkIH0gPSBhd2FpdCBzcXMuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgUXVldWVVcmw6IEVNQUlMX1BST0NFU1NJTkdfUVVFVUVfVVJMLFxuICAgICAgICAgICAgTWVzc2FnZUJvZHk6IEpTT04uc3RyaW5naWZ5KHsgdXNlcjogbmV3VXNlciB9KVxuICAgICAgICB9KS5wcm9taXNlKClcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIGNyZWF0ZWQnXG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ZhaWwgdG8gY3JlYXRlIHVzZXInXG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NVc2VyKHByb3BzOiBhbnkpIHtcbiAgICBjb25zdCBhZG1pbkVtYWlsID0gJ2JydW5vX2RlbGF0ZWFAaG90bWFpbC5jb20nO1xuICAgIGNvbnN0IHJlY29yZFByb21pc2VzID0gcHJvcHMuUmVjb3Jkcy5tYXAoYXN5bmMgKHJlY29yZDogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgYm9keSB9ID0gcmVjb3JkO1xuICAgICAgICBjb25zdCB7IHVzZXIgfSA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgICAgIGNvbnN0IHsgbmFtZSwgZW1haWwsIGl0ZW1zIH0gPSB1c2VyO1xuXG4gICAgICAgIGNvbnN0IHVzZXJNZXNzYWdlID0gYFxuICAgICAgICAgICAgTmV3IHVzZXI6ICR7bmFtZX1cbiAgICAgICAgICAgIEVtYWlsOiAke2VtYWlsfVxuICAgICAgICAgICAgSXRlbXM6ICR7SlNPTi5zdHJpbmdpZnkoaXRlbXMpfVxuICAgICAgICBgO1xuICAgICAgICBjb25zdCBzZXNQYXJhbXMgPSB7XG4gICAgICAgICAgICBNZXNzYWdlOiB7XG4gICAgICAgICAgICAgICAgQm9keToge1xuICAgICAgICAgICAgICAgICAgICBUZXh0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBEYXRhOiB1c2VyTWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIENoYXJzZXQ6ICdVVEYtOCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgU3ViamVjdDoge1xuICAgICAgICAgICAgICAgICAgICBEYXRhOiAnTmV3IHVzZXInLFxuICAgICAgICAgICAgICAgICAgICBDaGFyc2V0OiAnVVRGLTgnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFNvdXJjZTogYWRtaW5FbWFpbCxcbiAgICAgICAgICAgIERlc3RpbmF0aW9uOiB7XG4gICAgICAgICAgICAgICAgVG9BZGRyZXNzZXM6IFthZG1pbkVtYWlsXVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBzZXMuc2VuZEVtYWlsKHNlc1BhcmFtcykucHJvbWlzZSgpO1xuICAgIH0pO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKHJlY29yZFByb21pc2VzKTtcbn0iXX0=